Laboratoy Paper
 Ferraglio Danut Octavian
 Grupa 1.1, Anul 1, Calculatoare in Limba Engleza
 


Contents
1 Problem statement.............................................................................
2 Algorithms...........................................................................................
 	2.1 Algoritm rucsac.....................................................................................................
 	2.2 Explanation of the knapsack algorithm .................................................................
 	2.3 Algorithm for enumerating selected items ...........................................................
	 2.4 Explanation of the Algorithm for Enumerating Selected Items..............................
 3  Experimental Data
 GitHub Link: <aici pui linkul>



1 Problem statement 

 	The purpose of this lab work is to solve the following problem: a fisherman needs to select lobsters from a set such that the total value is maximized, while the total size remains within the capacity of his net. This problem is a variation of the classic knapsack problem with the additional requirement of enumerating the chosen lobsters.

	The scenario is as follows: The fisherman has a net with a specified maximum capacity. He has an available set of lobsters, each with three key characteristics: name, size, and value. The program should take as input the maximum capacity of the net and the details of each lobster. The goal is to determine the optimal combination of lobsters that maximizes the total value while adhering to the net's capacity constraint.

Mathematically, the problem can be defined as:

Input:
Input File Contents:
   - Net Capacity (first line of input file)
   - Lobsters (subsequent lines of input file)
     - Lobster Name (string)
     - Lobster Size (integer)
     - Lobster Value (integer)

 Program Constants:
   - MAX_NAME_LENGTH (defined in lobster.h)

Output:
- A subset of selected lobsters such that:
 	 - The sum of the sizes of the selected lobsters is less than or equal to C.
 	 - The sum of the values of the selected lobsters is maximized.
  	- The selected lobsters are enumerated.

Therefore, this problem is a combinatorial optimization problem, akin to the knapsack problem, but with the added requirement of enumerating the selected lobsters. Implementing an efficient algorithm for this problem involves addressing the combinatorial complexity to ensure the solution is optimal given the constraints.
 
2 Algorithms
 2.1 Algoritm 
 	To achieve the maximum possible value that can fit in the net, I used the knapsack dynamic programming algorithm. The time complexity of this algorithm is O(n * c), where n represents the number of lobsters and c is the maximum capacity.
 Algorithm 1 (Knapsack)
 1: Let a table mat[0..n][0..C]
2 for lobster_idx from 0 to num_lobsters:
   3 for capacity_idx from 0 to max_net_capacity:
       4 if capacity_idx == 0 or lobster_idx == 0:
           5 set_matrix_value(dp_matrix, lobster_idx, capacity_idx, 0)
    6    else if lobster_list[lobster_idx - 1].size <= capacity_idx:
          7  set_matrix_value(dp_matrix, lobster_idx, capacity_idx,
              8  max(
                  9  lobster_list[lobster_idx - 1].value +
                 10   get_matrix_value(dp_matrix, lobster_idx - 1, capacity_idx - lobster_list[lobster_idx - 1].size),
                    11 get_matrix_value(dp_matrix, lobster_idx - 1, capacity_idx)
                )
            )
 13: return mat[n][C]
 


2.2 Explanation of the knapsack algorithm
1 Initialization Loop:

Iterate through each lobster_idx from 0 to num_lobsters.
For each lobster_idx, iterate through each capacity_idx from 0 to max_net_capacity.
2 Base Case:

If capacity_idx is 0 or lobster_idx is 0, set the value in the dp_matrix at position [lobster_idx][capacity_idx] to 0.
3 Recursive Case:

If the size of the current lobster (lobster_list[lobster_idx - 1].size) is less than or equal to the current capacity (capacity_idx):
Set the value in the dp_matrix at position [lobster_idx][capacity_idx] to the maximum of:
The value of the current lobster (lobster_list[lobster_idx - 1].value) plus the value from the dp_matrix at the position [lobster_idx - 1][capacity_idx - lobster_list[lobster_idx - 1].size].
The value from the dp_matrix at the position [lobster_idx - 1][capacity_idx]


 2.3 Algorithm for enumerating selected items
	 To determine which objects have been selected to achieve the maximum
 value, we can traverse the table mat in reverse order, starting from mat[n][C]:
 Algorithm 2 : Algorithm for Enumerating Selected Items
 1: Initialize the empty list selected Items
2 while current_lobster != 0 and remaining_capacity != 0:
   3  if get_matrix_value(dp_matrix, current_lobster, remaining_capacity) != get_matrix_value(dp_matrix, current_lobster - 1, remaining_capacity):
      4   write lobster_list[current_lobster - 1].name to output_file
       5  if remaining_capacity > lobster_list[current_lobster - 1].size:
           6  remaining_capacity = remaining_capacity - lobster_list[current_lobster - 1].size
     7    else:
          8   remaining_capacity = 0
    9 current_lobster = current_lobster - 1
10 free dp_matrix.elements
11 write "=== Value in the knapsack" optimal_value "===" to output_file


 2.4 Explanation of the Algorithm for Enumerating Selected Items
 	1 Loop Until No More Lobsters or Capacity:

Continue the loop while current_lobster is not zero and remaining_capacity is not zero.
Check if Lobster is Included in the Optimal Solution:

If the value in the matrix at the current lobster and remaining capacity is different from the value in the matrix at the previous lobster and the same capacity:
This indicates that the current lobster was included in the optimal solution.
2 Record the Lobster's Name:

Write the name of the current lobster to the output file.
Update Remaining Capacity:

If the remaining capacity is greater than the size of the current lobster:
Subtract the size of the current lobster from the remaining capacity.
3 Otherwise:
Set the remaining capacity to zero.
Move to the Previous Lobster:

Decrease the current_lobster counter by one to move to the previous lobster.
4 Clean Up:

Free the memory allocated for the matrix elements.
5 Output the Optimal Value:

Write the total value in the knapsack to the output file in the specified format.
 3 Experimental Data
 	The program was executed on ten test files, each of which was randomly generated using the "test-generator" program. The data in these files included lobsters with names shorter than 100 characters, with sizes and values ranging between 1 and 1000. The first test file contained 1000 lobsters and a maximum bag capacity of 1000, increasing by 1000 for each subsequent test file. The parameters used for generating the files are available in the params folder. The same test files were used to test both the C and Python implementations, and both produced identical results.

	Below is a graph showing the execution time of the C implementation in relation to the number of objects in each test case.
 

 	The execution time increases exponentially due to the time complexity being O(n*c), where c is equal to n in this scenario. 


